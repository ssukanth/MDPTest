								Layput widgets:
							====================
SingleChild Layout Widget:
=========================

1. Align:
--------------
> Widget to align itself according to the size of the child widget
> Aligns its child accordign to our requirement using the Class Alingment (Ex Alignment.bottomright)
>We can control the height and the widht of this widget using the "heightfactor" and the "widthfactor"
>If the dimentsions are not constrained and the sizefactor(height or width) are null ,
then the size of the widget will be the same as its child
>heightfactor and width factor are the factors whcih define the size of the widget according
to the child widget.
>One can think that , cant we use the "alignment" property instead of wrapping the
required widget inside Align widget. But the thing is if we want to make the alignment of the
child widget consistent wrt other widgets .Say we are using "alignment" proeprty then 
the alignment point describes a cpoint in the child's coordinate system, and different point in the 
coordinaate system of the widget inside which the child widget resides. To solve this issue
and to align the child such that both the point cordinates of child and parent overlap 
eachother we use ALIGN widget.
> We can user the named constructors of the Alignment class to align our child (Ex Alignment.bottomright)
> We can user parametrized constructor of the Alignment class Alignment(x factor, y factor)
to align the child according to the calculated coordinates and with the center as the center of the 
parent widget. The calculation of the cordinates are as follows:
Alignment(0.2,0.6)==> x= (.2*(widthofchild/2)+(widthofchild/2));
					  y= (.6*(heightofchild/2)+(heightofchild/2));
> Also the alignment can also be controlled using the "FractionalOffsetOrigin" class.
This is useful while we want to align child and "Align" widget coordinates on top of 
each other.Usually , the FractionalOffset class generates to coordinates(one as per the child
and the other as per the Align widget)
alignment: FractionalOffset(0.2, 0.6) means ==> 
coor1=((.2*(widhtpfchild/2)+widhtpfchild),(.2*(heightofchild/2)+heightofchild/2))
coor2=((.2*(widthofAlign/2)+widthofAlign),(.2*(heightofAlign/2)+heightofAlign/2))
 say coor1= (12.0,36.0) and coor2 =(24.0,72.0),the align widget positions the child widget
 such that 2 points are on top of each other, (24.0,72.0)-(12.0,36.0)=(12.0,36.0) from top 
 left of the Align widget(Unlike Alignment class which takes the center-orineted)
 Properties:
 ------------
 1. alignment - for alignning a child
 2. heightfactor - if not null , sets its height as the heightfactor times the heightof the child
 3. heightfactor - if not null , sets its widht as the widht times the width of the child
 4. child - widget below this widget in the tree.
 5. hashcode
 6. key - control how one widget can replace another widget in the tree
 
 Methods:
----------	

createRenderObject(BuildContext context) → RenderPositionedBox
Creates an instance of the RenderObject class that this RenderObjectWidget represents, using the configuration described by this RenderObjectWidget. [...]
override
debugFillProperties(DiagnosticPropertiesBuilder properties) → void
Add additional properties associated with the node. [...]
override
updateRenderObject(BuildContext context, covariant RenderPositionedBox renderObject) → void
Copies the configuration described by this RenderObjectWidget to the given RenderObject, which will be of the same type as returned by this object's createRenderObject. [...]
override
createElement() → SingleChildRenderObjectElement
RenderObjectWidgets always inflate to a RenderObjectElement subclass.
inherited
debugDescribeChildren() → List<DiagnosticsNode>
Returns a list of DiagnosticsNode objects describing this node's children. [...]
@protected, inherited
didUnmountRenderObject(covariant RenderObject renderObject) → void
A render object previously associated with this widget has been removed from the tree. The given RenderObject will be of the same type as returned by this object's createRenderObject.
@protected, inherited
noSuchMethod(Invocation invocation) → dynamic
Invoked when a non-existent method or property is accessed. [...]
inherited
toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode
Returns a debug representation of the object that is used by debugging tools and by DiagnosticsNode.toStringDeep. [...]
inherited
toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this object.
inherited
toStringDeep({String prefixLineOne: '', String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this node and its descendants. [...]
inherited
toStringShallow({String joiner: ', ', DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a one-line detailed description of the object. [...]
inherited
toStringShort() → String
A short, textual description of this widget.
inherited
			  
					  
2. Aspectratio
3. BaseLine
4. Center
5. Constrained Box
6. Container
=================
> This widget is primarily useful foe styling the child widget (In the sense , if we want to
style any widget and the particular widget does not support styling), then we can wrap
the required widget inside the Container widget and provide styling.
> Its a convenience widget which can be commonly used for painting, sizing,positioning
>We can provide the padding and margin using container
>Container without child takes as much size as possible (In the sense , the whole size of parent of the container).
> If the container has a child, then it takes the sizes of the child widget.
>if the container has no height, widht and constraint defined and parent provides unbounded
constraints, then the container tries to be as small as possible.
>if the Constianer has no child and no alignment , but has height and widht or has
constraints defined, then the container tries to be as small as possible with size 
only using the specified sizes and its parent sizes.
>If container has no child, no height, no width, no constraints, and parents has 
constaints defined, then the container will adhere to the parent's constarints.
>If the container has laignemnt , and parent provides unbounded constraints, thent he 
container tries to size itself around the child.
>If there is alignment defined and parent has bounded constraints defined,then the container
tries to fit the parent constraints and align the child as per the alignment.
>If there are no constraints , no height, no width and no alignment but, has a child , then the 
container passes the constraints of the parent to the child and sizes itself to 
fit the child.
Properties:
================
1. alignment -AlignmentGeaometry- align the child with in the container.
2. child -Widget- the widget to be place inside the container.
3. constraints -BoxConstraints- additional constarints to appl to the child.
4. decoration -Decoration -The decoration to paint behind the child.
5. foregrounddecoration - Decoratrion- The decoratino to be painted infront of the child.
6. margin - EdgeInsetsGeometry - Empty space to surround the Decoration and the child
7. padding - EdgeInsetsGeometry- Empty space to inscribe inside the decoration , The 
child if any is placed inside the padding
8.transform - Matrix - The transformatin matrix to apply before painting the container.
Methods
=============
build(BuildContext context) → Widget
Describes the part of the user interface represented by this widget. [...]
override
debugFillProperties(DiagnosticPropertiesBuilder properties) → void
Add additional properties associated with the node. [...]
override
createElement() → StatelessElement
Creates a StatelessElement to manage this widget's location in the tree. [...]
inherited
debugDescribeChildren() → List<DiagnosticsNode>
Returns a list of DiagnosticsNode objects describing this node's children. [...]
@protected, inherited
noSuchMethod(Invocation invocation) → dynamic
Invoked when a non-existent method or property is accessed. [...]
inherited
toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode
Returns a debug representation of the object that is used by debugging tools and by DiagnosticsNode.toStringDeep. [...]
inherited
toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this object.
inherited
toStringDeep({String prefixLineOne: '', String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this node and its descendants. [...]
inherited
toStringShallow({String joiner: ', ', DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a one-line detailed description of the object. [...]
inherited
toStringShort() → String
A short, textual description of this widget.
inherited

7. CustomsinglechildLayout
8. Expanded
9. FittedBox
10. FractionallySizedBox:
=========================
>The widget which alters or on fly defines the size of its child as the fraction of
total size available. The fraction can be privided as heightFactor\widthFactor.
Constructor:
================
FractionallySizedBox({Key key, AlignmentGeometry alignment: Alignment.center, double widthFactor, double heightFactor, Widget child })
Properties:
=============
1. alignment : how to align the child
2. heightFactor : 0 to 1
3. widthFactor : 0 to 1
4. child : widget to put inside.
Methods :
===============
CreateRenderObject(BuildContext context) → RenderFractionallySizedOverflowBox
Creates an instance of the RenderObject class that this RenderObjectWidget represents, using the configuration described by this RenderObjectWidget. [...]
override
debugFillProperties(DiagnosticPropertiesBuilder properties) → void
Add additional properties associated with the node. [...]
override
updateRenderObject(BuildContext context, covariant RenderFractionallySizedOverflowBox renderObject) → void
Copies the configuration described by this RenderObjectWidget to the given RenderObject, which will be of the same type as returned by this object's createRenderObject. [...]
override
createElement() → SingleChildRenderObjectElement
RenderObjectWidgets always inflate to a RenderObjectElement subclass.
inherited
debugDescribeChildren() → List<DiagnosticsNode>
Returns a list of DiagnosticsNode objects describing this node's children. [...]
@protected, inherited
didUnmountRenderObject(covariant RenderObject renderObject) → void
A render object previously associated with this widget has been removed from the tree. The given RenderObject will be of the same type as returned by this object's createRenderObject.
@protected, inherited
noSuchMethod(Invocation invocation) → dynamic
Invoked when a non-existent method or property is accessed. [...]
inherited
toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode
Returns a debug representation of the object that is used by debugging tools and by DiagnosticsNode.toStringDeep. [...]
inherited
toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this object.
inherited
toStringDeep({String prefixLineOne: '', String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this node and its descendants. [...]
inherited
toStringShallow({String joiner: ', ', DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a one-line detailed description of the object. [...]
inherited
toStringShort() → String
A short, textual description of this widget.
inherited
11. IntrinsicHeight
12. IntrinsicWidth
13. LimitedBox,
14. Offstage
15. OverflowBox
16. Padding
17. SizedBox
=====================
>Its a box with specified size.
>If no size (height and width ) is provided, then it will take the soze fo the child.
>If size is specified , and has a child , then the widget forces the child to take the 
sizes specified.
>If there is no child , and parent constarints are specified, and height and width for the 
sized box are specified, then it will try to size itself to fit exactly the specified
height and width adhering to the constraints provided fro the parent
>"newSizedBox.expand " can be useful for naking the sizedbox fit the parent (just like
defineing the height and width spefied as doulbe.infinity)
Constructors:
================
1. SizedBox({Key key, double width, double height, Widget child })
Creates a fixed size box. The width and height parameters can be null to indicate that the size of the box should not be constrained in the corresponding dimension.

2. SizedBox.expand({Key key, Widget child })
Creates a box that will become as large as its parent allows.

3. SizedBox.fromSize({Key key, Widget child, Size size })
Creates a box with the specified size.
4. SizedBox.shrink({Key key, Widget child })
Creates a box that will become as small as its parent allows.

Properties:
===============
1. height
2.width
3.child

Methods
================
createRenderObject(BuildContext context) → RenderConstrainedBox
Creates an instance of the RenderObject class that this RenderObjectWidget represents, using the configuration described by this RenderObjectWidget. [...]
override
debugFillProperties(DiagnosticPropertiesBuilder properties) → void
Add additional properties associated with the node. [...]
override
toStringShort() → String
A short, textual description of this widget.
override
updateRenderObject(BuildContext context, covariant RenderConstrainedBox renderObject) → void
Copies the configuration described by this RenderObjectWidget to the given RenderObject, which will be of the same type as returned by this object's createRenderObject. [...]
override
createElement() → SingleChildRenderObjectElement
RenderObjectWidgets always inflate to a RenderObjectElement subclass.
inherited
debugDescribeChildren() → List<DiagnosticsNode>
Returns a list of DiagnosticsNode objects describing this node's children. [...]
@protected, inherited
didUnmountRenderObject(covariant RenderObject renderObject) → void
A render object previously associated with this widget has been removed from the tree. The given RenderObject will be of the same type as returned by this object's createRenderObject.
@protected, inherited
noSuchMethod(Invocation invocation) → dynamic
Invoked when a non-existent method or property is accessed. [...]
inherited
toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode
Returns a debug representation of the object that is used by debugging tools and by DiagnosticsNode.toStringDeep. [...]
inherited
toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this object.
inherited
toStringDeep({String prefixLineOne: '', String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a string representation of this node and its descendants. [...]
inherited
toStringShallow({String joiner: ', ', DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String
Returns a one-line detailed description of the object. [...]
inherited
18 SizedOverflowbox
19. Transform