package com.mdp.api.tests;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import org.testng.annotations.Parameters;
//import com.aventstack.extentreports.model.Test;
import com.selenium.utils.ApiUtils;
import com.selenium.utils.ReportGenerator;
import com.selenium.utils.TestVars;


public class TestBase extends ApiUtils{
    public static ThreadLocal<RemoteWebDriver> driver = new ThreadLocal<>();
    protected static ThreadLocal<TestVars> gt = new ThreadLocal<>();
    public static String os;
    public static boolean runTest=true;
    String tDatFileName;
    public static String testGName;



    
    @BeforeSuite(alwaysRun=true)
    @Parameters("env")
    	public void setupSuite(String env) throws IOException, ParseException
    	{
    		os=System. getProperty("os.name");
    		System.out.println("Setting up the suite for the env:"+env);
    		ApiUtils apiUtils=new ApiUtils();
    		String jString= apiUtils.generateStringFromResource(new File(".").getCanonicalPath()+"/TestData/Credentials.Json");
    		JSONParser jp = new JSONParser();
    		credentialJson= (JSONObject) ((JSONObject)jp.parse(jString)).get(env);
    		System.out.println("Credentials confiured");
    		//String jdat=apiUtils.generateStringFromResource(new File(".").getCanonicalPath()+"/TestData/TestData.Json");
    		//testData=(JSONObject)jp.parse(jdat);
    		List<String>l=Arrays.asList("admin@id.zeiss.com","Test123!");
    		dynamicCredentials.put("admin", l);
    		String repName="MDPAPITestAutomationResult";
        	System.out.println("The Name of the Suite is :"+repName);
        	macPath = System.getProperty("user.dir")+ "/Reports";
            windowsPath = System.getProperty("user.dir")+ "\\Reports";
            macReportFileLoc = macPath + "/" + reportFileName+"/"+repName+".html";
            winReportFileLoc = windowsPath + "\\" + reportFileName+"\\"+repName+".html";
            extent = ReportGenerator.createInstance(repName);
//    		List<String>creds=new ArrayList();
//    		creds.add("zeiss0719+ssc2@gmail.com");
//    		creds.add("Test123!");
//    		dynamicCredentials.put("sscadmin",creds);
    	}
    
    
 /*   @BeforeTest(alwaysRun=true)
    public void testdataSetup(ITestContext con)
    {
    	
    	tDatFileName= con.getCurrentXmlTest().getName();
    	System.out.println("The Bloody BEFORE test is running now for"+tDatFileName);
    	testData=configureTestData(tDatFileName);
    	
    }*/

    @BeforeMethod(alwaysRun=true)
    public void setup (ITestContext t,Method itr) throws IOException {
    	System.out.println("the before mehtod for "+t.getName());
    	//Test ts= t.getAnnotation(Test.class);
    	String driverLoc="";
    	if(os.toLowerCase().contains("mac"))
    	{
    		driverLoc=new File(".").getCanonicalPath()+"/src/test/resources/Drivers/Macos/chromedriver80";

    	}else if(os.toLowerCase().contains("window"))
    	{
    		driverLoc =new File(".").getCanonicalPath()+"\\src\\test\\resources\\Drivers\\Windows\\chromedriver.exe";

    	}
    	//String driverLoc="/Users/MDPAPITESTING/MDP/src/test/resources/Drivers/chromedriver";
		System.setProperty("webdriver.chrome.driver", driverLoc );
    	System.out.println("Local Execution");
    	driver.set(new ChromeDriver(getChromeOptions(false)));
    	exeData=new ArrayList<String>();
    	exeData.add("Initialized the Logs and Browser with :\n"+driver.get().getCapabilities());
    	System.out.println("The driver set");
    	testGName=itr.getAnnotation(org.testng.annotations.Test.class).groups()[0].toString();
    	System.out.println("The test groupname is :"+testGName);
    	if(!testGName.equalsIgnoreCase(tDatFileName))
    	{
    		System.out.println("The test is ran as part of another group");
    		testData=configureTestData(testGName);
    	}
    	//        System.out.println(t.getCurrentXmlTest().getGroupByInstances());
//        System.out.println(t.getCurrentXmlTest().getIncludedGroups());
//        System.out.println(t.getCurrentXmlTest().getXmlGroups().toString());
//        System.out.println(t.getCurrentXmlTest().getAllParameters());

        
    }
 
    public WebDriver getDriver() {
   	driver.get().manage().window().maximize();
        return driver.get();
    }
    
    public TestVars getTestVars()
    {
    	gt.set(new TestVars());
    	return gt.get();
    }
 
    @AfterMethod(alwaysRun=true)
    public void tearDown(ITestResult r,Object[] testData) throws ParseException, IOException {    	
    	//exeData=null;
    	//getDriver().quit();
    	if(r.getStatus()==ITestResult.SKIP)test.get().skip("Skipped");
    	System.out.println("Quit the driver");
    }
     
    public static ChromeOptions getChromeOptions(boolean isDoc) throws IOException {
        Map<String, Object> prefsMap = new HashMap<String, Object>();
       if(!isDoc)
    	   {
    	   System.out.println("Setting the donwload directory");
           prefsMap.put("download.default_directory", new File(".").getCanonicalFile()+"/Downloads");

    	   }
       	prefsMap.put("profile.default_content_settings.popups", 0);
        prefsMap.put("download.prompt_for_download", "false");
        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("prefs", prefsMap);
        options.addArguments("--start-maximized");
        options.addArguments("--ignore-certificate-errors");
        options.addArguments("--disable-popup-blocking");
        options.addArguments("--incognito");
        return options;
    }
    

    //Get Firefox Options
    public static FirefoxOptions getFirefoxOptions () {
        FirefoxOptions options = new FirefoxOptions();
        FirefoxProfile profile = new FirefoxProfile();
        //Accept Untrusted Certificates
        profile.setAcceptUntrustedCertificates(true);
        profile.setAssumeUntrustedCertificateIssuer(false);
        //Use No Proxy Settings
        profile.setPreference("network.proxy.type", 0);
        //Set Firefox profile to capabilities
        options.setCapability(FirefoxDriver.PROFILE, profile);
        return options;
    }
    
   


    
}
